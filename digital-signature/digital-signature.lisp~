;;(load "../RSA/RSA.lisp")
(defun sig-generate-id (name)
  (let ((ran (random 10000000000000)))
  (with-open-file (str "SIG_CHECK_FILE" :direction :output
                       :if-exists :supersede)
    ;; name random_number encrypt-random_number public_key n
    (format str "~A~%~A~%~A~%~A~%~A" name ran (rsa-encrypt-unit *rsa-key* ran) (rsa-key-public-key *rsa-key*) (rsa-key-n *rsa-key*)))))

(defun sig-check-id ()
  (with-open-file (str "SIG_CHECK_FILE")
    (let ((name (read))
          (ran (read))
          (en-ran (read))
          (key (list (read) (read))))
          (write 123)
    (rsa-decrypt-unit key en-ran))))
