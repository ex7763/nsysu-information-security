(defun cf-name-to-hash-num-string (x)
  (write-to-string (octets-to-integer (hash (string-to-octets x)))))

(defun cf-sig-friend (&optional (filename "myfriend"))
  (with-open-file (out (format nil "sig-~A" filename)
                       :direction :output
                       :if-exists :supersede)
    (with-open-file (in filename)
      (do ((friend-name (read-line in nil 'eof)
                        (read-line in nil 'eof)))
          ((eql friend-name 'eof))
        (format out "~A~%~A~%~%" (octets-to-integer (hash (string-to-octets friend-name))) (sig-encrypt-rsa-pss (cf-name-to-hash-num-string friend-name)))))))

(defun cf-sig-check-same-friend (myfriend sig-myfriend sig-otherfriend)
    (with-open-file (my sig-myfriend)
      (with-open-file (my-friend-name myfriend)
        (with-open-file (other sig-otherfriend)
          (let ((my-hash nil)
                (my-sig nil)
                (same-hash nil)
                (same-sig nil)
                (same-friend nil)
                (hash-friend (make-hash-table)))
            (do ((in (read my nil 'eof)
                     (read my nil 'eof)))
                ((eql in 'eof))
              (setf my-hash (append my-hash (list in)))
              (setf (gethash in hash-friend) (read my-friend-name))
              ;; (format t "~A~%~A~%" in (gethash in hash-friend))
              (setf my-sig (append my-sig (list (read my)))))
            (do ((in (read other nil 'eof)
                     (read other nil 'eof)))
                ((eql in 'eof))
              ;;check same friend and their sig
              (progn
                (if (intersection (list in) my-hash)
                    (progn
                      (setf same-hash (write-to-string in))
                      (setf same-sig (read other))
                      ;; check other friend-sig
                      (if (not(sig-decrypt-rsa-pss same-hash same-sig *rsa-key-other*))
                          (return-from cf-sig-check-same-friend nil)
                          (setf same-friend (append same-friend (list (gethash in hash-friend))))))
                  (read other))))
            ;;(format t "~A~%~%~A~%~%~A~%" my-hash same-hash same-sig)
            ;;(format t "~A~%" same-friend)
            (return-from cf-sig-check-same-friend (values t same-friend))))))))
